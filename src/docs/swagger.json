{
  "openapi": "3.0.0",
  "info": {
    "title": "Rental System API",
    "description": "API for apartment rental management system including apartments, contracts, invoices, payments, maintenance, expenses, and employees",
    "version": "1.0.0",
    "contact": {
      "email": "admin@rentalsystem.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Apartments",
      "description": "Apartment management"
    },
    {
      "name": "Contracts",
      "description": "Rental contract operations"
    },
    {
      "name": "Invoices",
      "description": "Invoice management"
    },
    {
      "name": "Payments",
      "description": "Payment tracking"
    },
    {
      "name": "Maintenance",
      "description": "Maintenance request management"
    },
    {
      "name": "Expenses",
      "description": "Expense tracking"
    },
    {
      "name": "Employees",
      "description": "Employee and salary management"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register user",
        "description": "Register a new user and return JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "description": "Return the currently authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apartments": {
      "get": {
        "tags": ["Apartments"],
        "summary": "Get all apartments",
        "description": "Return a list of all apartments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["Available", "Occupied", "Under Maintenance"]
            },
            "description": "Filter by apartment status"
          },
          {
            "in": "query",
            "name": "level",
            "schema": {
              "type": "number"
            },
            "description": "Filter by floor level"
          }
        ],
        "responses": {
          "200": {
            "description": "List of apartments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Apartment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Apartments"],
        "summary": "Create apartment",
        "description": "Create a new apartment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Apartment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apartment"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apartments/{id}": {
      "get": {
        "tags": ["Apartments"],
        "summary": "Get single apartment",
        "description": "Get details for a specific apartment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Apartment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Apartment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apartment"
                }
              }
            }
          },
          "404": {
            "description": "Apartment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Apartments"],
        "summary": "Update apartment",
        "description": "Update an existing apartment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Apartment ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApartmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Apartment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apartment"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Apartment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Apartments"],
        "summary": "Delete apartment",
        "description": "Delete an apartment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Apartment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Apartment deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Apartment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "user"],
            "default": "user",
            "example": "user"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5d7a514b5d2c12c7449be042"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "user"],
            "example": "admin"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApartmentRequest": {
        "type": "object",
        "required": ["level", "location", "number", "rooms"],
        "properties": {
          "level": {
            "type": "number",
            "example": 3
          },
          "location": {
            "type": "string",
            "example": "West Wing"
          },
          "number": {
            "type": "string",
            "example": "3W"
          },
          "rooms": {
            "type": "number",
            "example": 2
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Air Conditioning", "Elevator Access", "Parking"]
          },
          "status": {
            "type": "string",
            "enum": ["Available", "Occupied", "Under Maintenance"],
            "default": "Available",
            "example": "Available"
          }
        }
      },
      "Apartment": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5d7a514b5d2c12c7449be042"
          },
          "level": {
            "type": "number",
            "example": 3
          },
          "location": {
            "type": "string",
            "example": "West Wing"
          },
          "number": {
            "type": "string",
            "example": "3W"
          },
          "rooms": {
            "type": "number",
            "example": 2
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Air Conditioning", "Elevator Access", "Parking"]
          },
          "status": {
            "type": "string",
            "enum": ["Available", "Occupied", "Under Maintenance"],
            "example": "Available"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            }
          }
        }
      },
      "Contract": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5d7a514b5d2c12c7449be043"
          },
          "apartment": {
            "type": "string",
            "example": "5d7a514b5d2c12c7449be042"
          },
          "tenant": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Jane Smith"
              },
              "phone": {
                "type": "string",
                "example": "+1234567890"
              },
              "idImage": {
                "type": "string",
                "example": "uploads/id-123456.jpg"
              }
            }
          },
          "contractFile": {
            "type": "string",
            "example": "uploads/contract-123456.pdf"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "duration": {
            "type": "number",
            "example": 1
          },
          "paymentFrequency": {
            "type": "string",
            "enum": ["yearly", "bi-annually", "quarterly", "monthly"],
            "example": "monthly"
          },
          "amount": {
            "type": "number",
            "example": 1000
          },
          "status": {
            "type": "string",
            "enum": ["active", "expired", "terminated"],
            "example": "active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Resource not found"
          }
        }
      }
    }
  }
} 